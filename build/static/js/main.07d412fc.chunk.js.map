{"version":3,"sources":["utils.js","SingleColor.js","App.js","index.js"],"names":["componentToHex","c","hex","toString","length","rgbToHex","r","g","b","SingleColor","rgb","weight","index","hexColor","shade","useState","alert","setAlert","bcg","join","hexValue","useEffect","timeout","setTimeout","clearTimeout","className","style","backgroundColor","onClick","navigator","clipboard","writeText","App","color","setColor","error","setError","setShade","Values","all","list","setList","onSubmit","event","preventDefault","colors","parseInt","type","value","onChange","target","placeholder","for","id","name","min","max","currentColor","changeColorList","map","key","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"2LAAA,SAASA,EAAeC,GACtB,IAAIC,EAAMD,EAAEE,SAAS,IACrB,OAAsB,IAAfD,EAAIE,OAAe,IAAMF,EAAMA,EAOzBG,MAJf,SAAkBC,EAAGC,EAAGC,GACtB,MAAO,IAAMR,EAAeM,GAAKN,EAAeO,GAAKP,EAAeQ,IC0BvDC,EA7BK,SAAC,GAA6C,IAA3CC,EAA0C,EAA1CA,IAAKC,EAAqC,EAArCA,OAAQC,EAA6B,EAA7BA,MAAOC,EAAsB,EAAtBA,SAAUC,EAAY,EAAZA,MAAY,EACrCC,oBAAS,GAD4B,mBACxDC,EADwD,KACjDC,EADiD,KAEzDC,EAAMR,EAAIS,KAAK,KACfjB,EAAMG,EAAQ,WAAR,cAAYK,IAClBU,EAAQ,WAAOP,GASrB,OARAQ,qBAAU,WACR,IAAMC,EAAUC,YAAW,WACzBN,GAAS,KACR,KACH,OAAO,WACLO,aAAaF,MAEd,CAACN,IAEF,6BACES,UAAS,gBAAWb,EAAQ,IAAME,GAAS,eAC3CY,MAAO,CAAEC,gBAAgB,OAAD,OAAST,EAAT,MACxBU,QAAS,WACPX,GAAS,GACTY,UAAUC,UAAUC,UAAUX,KAGhC,uBAAGK,UAAU,iBAAiBd,EAA9B,KACA,uBAAGc,UAAU,eAAevB,GAC3Bc,GAAS,uBAAGS,UAAU,SAAb,yB,gBC+CDO,MArEf,WAAgB,IAAD,EACajB,mBAAS,IADtB,mBACNkB,EADM,KACCC,EADD,OAEanB,oBAAS,GAFtB,mBAENoB,EAFM,KAECC,EAFD,OAGarB,mBAAS,GAHtB,mBAGND,EAHM,KAGCuB,EAHD,OAIWtB,mBAAS,IAAIuB,IAAO,WAAWC,IAAIzB,IAJ9C,mBAIN0B,EAJM,KAIAC,EAJA,KAoBb,OACE,oCACE,6BAAShB,UAAU,aACjB,+CACA,0BAAMiB,SAnBS,SAACC,GACpBA,EAAMC,iBACN,IACE,IAAIC,EAAS,IAAIP,IAAOL,GAAOM,IAAIO,SAAShC,IAC5C2B,EAAQI,GACR,MAAOV,GACPC,GAAS,MAcL,2BACEW,KAAK,OACLC,MAAOf,EACPgB,SAAU,SAACN,GAAD,OAAWT,EAASS,EAAMO,OAAOF,QAC3CG,YAAY,cACZ1B,UAAS,UAAKU,EAAQ,QAAU,QAElC,4BAAQV,UAAU,MAAMsB,KAAK,UAA7B,WAIF,yBAAKtB,UAAU,YACb,2BAAO2B,IAAI,QAAQ3B,UAAU,cAA7B,SAGA,2BACEsB,KAAK,QACLM,GAAG,QACHC,KAAK,QACLC,IAAI,IACJC,IAAI,MACJ/B,UAAU,SACVwB,SAAU,SAACN,GAAD,OAjCI,SAACA,GACvBN,EAASS,SAASH,EAAMO,OAAOF,QAC/B,IAAIS,EAAexB,GAAgB,UAC/BY,EAAS,IAAIP,IAAOmB,GAAclB,IAAIO,SAASH,EAAMO,OAAOF,QAChEP,EAAQI,GA6BqBa,CAAgBf,MAEvC,4BAAK7B,KAGT,6BAASW,UAAU,UAChBe,EAAKmB,KAAI,SAAC1B,EAAOrB,GAChB,OACE,kBAAC,EAAD,eACEgD,IAAKhD,GACDqB,EAFN,CAGErB,MAAOA,EACPC,SAAUoB,EAAM/B,IAChBY,MAAOA,WC5DrB+C,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,U","file":"static/js/main.07d412fc.chunk.js","sourcesContent":["function componentToHex(c) {\n  var hex = c.toString(16);\n  return hex.length === 1 ? \"0\" + hex : hex;\n}\n\nfunction rgbToHex(r, g, b) {\n  return \"#\" + componentToHex(r) + componentToHex(g) + componentToHex(b);\n}\n\nexport default rgbToHex;\n","import React, { useState, useEffect } from \"react\";\nimport rgbToHex from \"./utils\";\n\nconst SingleColor = ({ rgb, weight, index, hexColor, shade }) => {\n  const [alert, setAlert] = useState(false);\n  const bcg = rgb.join(\",\");\n  const hex = rgbToHex(...rgb);\n  const hexValue = `#${hexColor}`;\n  useEffect(() => {\n    const timeout = setTimeout(() => {\n      setAlert(false);\n    }, 2000);\n    return () => {\n      clearTimeout(timeout);\n    };\n  }, [alert]);\n  return (\n    <article\n      className={`color ${index > 100 / shade && \"color-light\"}`}\n      style={{ backgroundColor: `rgb(${bcg})` }}\n      onClick={() => {\n        setAlert(true);\n        navigator.clipboard.writeText(hexValue);\n      }}\n    >\n      <p className=\"percent-value\">{weight}%</p>\n      <p className=\"color-value\">{hex}</p>\n      {alert && <p className=\"alert\">copied to clipboard</p>}\n    </article>\n  );\n};\n\nexport default SingleColor;\n","import React, { useState } from \"react\";\nimport SingleColor from \"./SingleColor\";\n\nimport Values from \"values.js\";\n\nfunction App() {\n  const [color, setColor] = useState(\"\");\n  const [error, setError] = useState(false);\n  const [shade, setShade] = useState(5);\n  const [list, setList] = useState(new Values(\"#ff0000\").all(shade));\n  const handleSubmit = (event) => {\n    event.preventDefault();\n    try {\n      let colors = new Values(color).all(parseInt(shade));\n      setList(colors);\n    } catch (error) {\n      setError(true);\n    }\n  };\n  const changeColorList = (event) => {\n    setShade(parseInt(event.target.value));\n    let currentColor = color ? color : \"#ff0000\";\n    let colors = new Values(currentColor).all(parseInt(event.target.value));\n    setList(colors);\n  };\n  return (\n    <>\n      <section className=\"container\">\n        <h3>color generator</h3>\n        <form onSubmit={handleSubmit}>\n          <input\n            type=\"text\"\n            value={color}\n            onChange={(event) => setColor(event.target.value)}\n            placeholder=\"#ff0000/red\"\n            className={`${error ? \"error\" : null}`}\n          />\n          <button className=\"btn\" type=\"submit\">\n            Submit\n          </button>\n        </form>\n        <div className=\"shadeDiv\">\n          <label for=\"shade\" className=\"shadeLabel\">\n            Shade\n          </label>\n          <input\n            type=\"range\"\n            id=\"shade\"\n            name=\"shade\"\n            min=\"1\"\n            max=\"100\"\n            className=\"slider\"\n            onChange={(event) => changeColorList(event)}\n          />\n          <h4>{shade}</h4>\n        </div>\n      </section>\n      <section className=\"colors\">\n        {list.map((color, index) => {\n          return (\n            <SingleColor\n              key={index}\n              {...color}\n              index={index}\n              hexColor={color.hex}\n              shade={shade}\n            />\n          );\n        })}\n      </section>\n    </>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}